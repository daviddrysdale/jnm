#!/usr/bin/env python
"""jldd [options] file[s]

jldd displays the package dependencies of each file in the argument list.
"""
import os
import sys
import re
import zipfile

from javaclass.classfile import ClassFile
from javaclass.jarfile import jar_classes
from javaclass.jnm import _Opts, resolve_jar, remove_defined, remove_nonclass

# search for and load classes in order:
#  - bootstrap classes: java platform, public classes of Java Class Library $JAVA_HOME/jre/lib/*.jar, especially rt.jar
#     on Mac OS X these are instead in /System/Library/Frameworks/JavaVM.framework/Classes as classes.jar and ui.jar
#     in sun.boot.class.path property
#  - extension classes: in <JRE>/jre/lib/ext/*.jar directory of JRE/JDK
#  - user-defined classes: in class path $CLASSPATH
#       --classpath command overrides this
#       --jar <jarfile> option forces all user classes to come from this jarfile alone
#
# Maybe include http://mojo.codehaus.org/animal-sniffer/java-boot-classpath-detector/index.html
#
# Need to process META-INF/MANIFEST.MF inside Jar files, which extends the classpath for loading classes within that jar file
MANIFEST_CLASSPATH = re.compile(r'^Class-Path: (?P<classpath>.*)\s*$')  # space-separated list of relative paths to jarfiles


class LDDOpts(_Opts):
    OPT_INFO = (_Opts.OPT_INFO +
                (("c:", "classpath=", "class search path of directories and jar files (default $CLASSPATH)", None, None, None),
                 ("b:", "bootclasspath=", "class search path for bootstrap classes (default @@@)", None, None, None),
                 ("r", "resolve-all", "check all references are satisfied (slower)", None, None, None),
                 ))

    def __init__(self, message):
        self.message = message
        self.filters = set([resolve_jar, remove_defined])
        self.sorts = []
        self.displays = set()
        self.classpath = os.environ.get("CLASSPATH", ".").split(":")
        self.bootclasspath = os.environ.get("JAVA_HOME", ".")  # @@@@
        self.resolve_all = False

    def process_opt(self, opt, arg):
        if opt in ("-c", "--classpath"):
            self.classpath = arg.split(":")
            return True
        elif opt in ("-b", "--bootclasspath"):
            self.bootclasspath = arg.split(":")
            return True
        elif opt in ("-r", "--resolve-all"):
            self.resolve_all = True
            return True
        elif super(LDDOpts, self).process_opt(opt, arg):
            return True
        else:
            return False


def package_name(jcls):
    idx = jcls.rfind('.')
    if idx == -1:
        return None
    else:
        return jcls[:idx]


def get_classes(classpath):
    results = {}  # classname => set of owning jarfiles/top-level directories
    for top in classpath:
        if top.endswith(".jar") and os.path.isfile(top):
            zf = zipfile.ZipFile(top, "r")
            for info in zf.infolist():
                filename, ext = os.path.splitext(info.filename)
                if ext == ".class":
                    classname = filename.replace(os.sep, ".")
                    if classname not in results:
                        results[classname] = top
        elif os.path.isdir(top):
            pass  # @@@
    return results


if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print >> sys.stderr, "No files were specified on the command line.  Try --help."
    else:
        opts = LDDOpts(__doc__)
        filenames = opts.getopts(sys.argv[1:])
        if not opts.resolve_all:
            opts.filters.add(remove_nonclass)
        show_filename_prolog = (len(filenames) > 1)
        for arg in filenames:
            if arg.endswith(".jar"):
                jarfile = arg
                clist = jar_classes(arg)
            else:
                jarfile = None
                with open(arg, "rb") as f:
                    clist = [(arg, ClassFile(f.read()))]
            resultslist = [(jarfile, filename, sym) for filename, c in clist for sym in c.dump()]

        # Resolve references within each of the set of destination files, return only unresolved symbols.
        # Typically (i.e. when opts.resolve_all not set) this is just unresolved class refs.
        references = opts.process(resultslist)

        # Hunt through the classpaths to find all available classes (but do
        # not look inside those classes)
        opts.bootclasspath = "/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsfd.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/classes.jar:/System/Library/Frameworks/JavaVM.framework/Frameworks/JavaRuntimeSupport.framework/Resources/Java/JavaRuntimeSupport.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/ui.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/laf.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/sunrsasign.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jsse.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/jce.jar:/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Classes/charsets.jar".split(':')
        # @@@
        bootclass = get_classes(opts.bootclasspath)
        jclass = get_classes(opts.classpath)

        if opts.resolve_all:
            # @@@ alternatively, display the unresolved classes individually?
            pass  # @@@@
        else:
            mappings = []
            unresolveds = {}
            ref_to = {}
            for jarfile, classfile, symbol in references:
                if jarfile is None:
                    this_file = classfile
                else:
                    this_file = jarfile
                if this_file not in ref_to:
                    ref_to[this_file] = {}
                jpkg = package_name(symbol.jcls)
                if jpkg not in ref_to[this_file]:
                    ref_to[this_file][jpkg] = set()
                if symbol.jcls in bootclass:
                    mappings.append((jarfile, classfile, symbol, bootclass[symbol.jcls]))
                    ref_to[this_file][jpkg].add(bootclass[symbol.jcls])
                elif symbol.jcls in jclass:
                    mappings.append((jarfile, classfile, symbol, jclass[symbol.jcls]))
                    ref_to[this_file][jpkg].add(jclass[symbol.jcls])
                else:
                    if this_file not in unresolveds:
                        unresolveds[this_file] = []
                    unresolveds[this_file].append((jarfile, classfile, symbol))

        for filename in filenames:
            if show_filename_prolog:
                print "%s:" % filename
            if filename in ref_to:
                for jpkg in ref_to[filename]:
                    if len(ref_to[filename][jpkg]) == 0:
                        print "\t %s => ???" % jpkg
                    else:
                        print "\t %s => %s" % (jpkg, ", ".join(ref_to[filename][jpkg]))
            if filename in unresolveds:
                print "Failed to resolve:"
                for jarfile, classfile, symbol in unresolveds[filename]:
                    print " %s(%s): %s" % (jarfile, classfile, symbol.unique_name)
