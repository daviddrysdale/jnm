#!/usr/bin/env python
"""jnm [options] file[s]

jnm displays the symbol table of each file in the argument list.  If an
argument is a jarfile, a listing for each class file in the file will be
produced.

Each symbol name is preceded by its value (blanks if undefined).  This
value is followed by one of the following characters, representing the
symbol type:

    C  Class
    D  Static field
    I  Instance field
    T  Method

    K  Undefined reference to class
    F  Undefined reference to static field
    J  Undefined reference to instance field
    R  Undefined reference to method

If the symbol is private, the symbol's type is instead represented by
the corresponding lowercase letter.
"""
import sys

from javaclass.classfile import ClassFile
from javaclass.jarfile import jar_classes
from javaclass.jnm import NMOpts, prepend_filename

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print >> sys.stderr, "No classes were specified on the command line.  Try --help."
    else:
        opts = NMOpts(__doc__)
        args = opts.getopts(sys.argv[1:])
        show_filename_prolog = (len(args) > 1)
        for arg in args:
            if arg.endswith(".jar"):
                show_filename_prolog = True
                jarfile = arg
                clist = jar_classes(arg)
            else:
                jarfile = None
                with open(arg, "rb") as f:
                    clist = [(arg, ClassFile(f.read()))]
            resultslist = [(jarfile, filename, sym) for filename, c in clist for sym in c.dump()]

        resultslist = opts.process(resultslist)

        prev_file = (None, None)
        for jarfile, classfile, symbol in resultslist:
            this_file = (jarfile, classfile)
            if (show_filename_prolog and
                prev_file != this_file and
                prepend_filename not in opts.displays):
                if jarfile is None:
                    print "\n%s:" % classfile
                else:
                    print "\n%s(%s):" % this_file
                prev_file = this_file
            print opts.display(jarfile, classfile, symbol).encode("utf-8")
