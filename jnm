#!/usr/bin/env python
"""jnm [options] file[s]

jnm displays the symbol table of each file in the argument list.  If an
argument is a jarfile, a listing for each class file in the file will be
produced.

Each symbol name is preceded by its value (blanks if undefined).  This
value is followed by one of the following characters, representing the
symbol type:

    C  Class
    D  Static field
    I  Instance field
    T  Method

    K  Undefined reference to class
    F  Undefined reference to static field
    J  Undefined reference to instance field
    R  Undefined reference to method

If the symbol is private, the symbol's type is instead represented by
the corresponding lowercase letter.
"""
# Copyright (C) 2004, 2005, 2006, 2011 Paul Boddie <paul@boddie.org.uk>
# Copyright (C) 2010 Braden Thomas <bradenthomas@me.com>
# Copyright (C) 2011 David Drysdale <dmd@lurklurk.org>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
import sys
import struct
import getopt

from javaclass import jvmspec
from javaclass.jvmspec import fqcn
from javaclass.jvmspec import demangle_method_descriptor
from javaclass.jvmspec import demangle_field_descriptor
from javaclass.jvmspec import size_field_descriptor
from javaclass.classfile import (ClassInfo, FieldRefInfo, MethodRefInfo,
                                 DoubleInfo, FieldInfo, MethodInfo,
                                 CodeAttributeInfo, ClassFile)
from javaclass.jarfile import jar_classes


class Symbol(object):
    """Class describing a symbol or symbol reference"""

    # Type characters; lowercase for local (=private), uppercase for external
    # (protected/public)
    CLASS = 'C'
    DATA = 'D'
    CODE = 'T'
    # Instance data has no equivalent in C -- fields in dynamically allocated
    # objects are accessed by calculating their offset using the header file
    # definition.  However, Java allows symbolic access to per-object fields,
    # so need to show them in the output.
    INSTANCE_DATA = 'I'

    UNDEFINED = 'U'
    # References in code to other data/code.
    REF_CLASS = 'K'
    REF_DATA = 'F'
    REF_CODE = 'R'
    REF_INSTANCE_DATA = 'J'

    DEF_SYMTYPES = set((CLASS, DATA, CODE, INSTANCE_DATA))
    REF_SYMTYPES = set((REF_CLASS, REF_DATA, REF_CODE, REF_INSTANCE_DATA))

    def __init__(self, value, symtype, name, expanded_name=None):
        self.value = value
        self.symtype = symtype
        self.name = name
        if expanded_name is not None:
            self.expanded_name = expanded_name
        else:
            self.expanded_name = self.name

    def __hash__(self):
        return hash(self.value) ^ hash(self.symtype) ^ hash(self.name)

    def __eq__(self, other):
        if not isinstance(other, Symbol):
            return False
        return (self.value == other.value and
                self.symtype == other.symtype and
                self.name == other.name)

    def __ne__(self, other):
        return not self.__eq__(other)

    def __str__(self):
        if self.value is None:
            return "         %s %s" % (self.symtype, self.name)
        else:
            return "%08x %s %s" % (self.value, self.symtype, self.name)


def visibility(t_code, access_flags):
    if access_flags & jvmspec.PRIVATE:
        return t_code.lower()
    else:
        return t_code.upper()


def findref(jcls, ii):
    const = jcls.constants[ii - 1]
    if isinstance(const, ClassInfo):
        class_desc = str(const)
        ii = 0
        while class_desc[ii] == "[":
            ii += 1
        if class_desc[ii] != "L":
            # Not interested in arrays of primitive types
            return None
        else:
            # Object or array of objects
            return fqcn(class_desc)
    elif isinstance(const, FieldRefInfo):
        return fqcn(str(const))
    elif isinstance(const, MethodRefInfo):
        return fqcn(str(const))
    else:
        return None


# We don't need no stinking Visitor pattern
def _FieldInfo_dump(self):
    if self.access_flags & jvmspec.STATIC:
        symtype = Symbol.DATA
    else:
        symtype = Symbol.INSTANCE_DATA
    return Symbol(size_field_descriptor(str(self.class_file.constants[self.descriptor_index - 1])),
                  visibility(symtype, self.access_flags),
                  "%s.%s" % (str(self.class_file.this_class),
                             str(self.class_file.constants[self.name_index - 1])))
FieldInfo.dump = _FieldInfo_dump


def _MethodInfo_dump(self):
    # Find the Code attribute
    size = None
    codeattr = None
    for attr in self.attributes:
        if isinstance(attr, CodeAttributeInfo):
            codeattr = attr
            size = len(attr.code)
            break
    results = [Symbol(size,
                      visibility(Symbol.CODE, self.access_flags),
                      "%s.%s" % (str(self.class_file.this_class),
                                 str(self.class_file.constants[self.name_index - 1])))]
    if codeattr is not None:
        results.extend(codeattr.dump())
    return results
MethodInfo.dump = _MethodInfo_dump


def _CodeAttributeInfo_dump(self):
    results = []
    ii = 0
    while ii < len(self.code):
        opcode = ord(self.code[ii])
        if opcode not in jvmspec.BYTECODES:
            raise Exception("Unknown opcode %d" % opcode)
        op_name, op_size, struct_code, info_types = jvmspec.BYTECODES[opcode]
        assert len(struct_code) == len(info_types)
        if op_name == "tableswitch":
            # expect 0 byte pads to next 4-byte boundary
            num_zeros = (4 - ((ii + 1) % 4)) % 4
            args_offset = ii + 1 + num_zeros
            assert (args_offset % 4) == 0
            default, low, high = struct.unpack(">iii",
                                               self.code[args_offset:args_offset + 12])
            num_offsets = high - low + 1
            op_size = num_zeros + (3 + num_offsets) * 4
            struct_code = num_zeros * "B" + "iii" + num_offsets * "i"
            info_types = num_zeros * "0" + "###" + num_offsets * "o"
        elif op_name == "lookupswitch":
            # expect 0 byte pads to next 4-byte boundary
            num_zeros = (4 - ((ii + 1) % 4)) % 4
            args_offset = ii + 1 + num_zeros
            assert (args_offset % 4) == 0
            default, npairs = struct.unpack(">ii",
                                            self.code[args_offset:args_offset + 8])
            op_size = num_zeros + (2 + npairs) * 4
            struct_code = num_zeros * "B" + "ii" + npairs * "i"
            info_types = num_zeros * "0" + "##" + npairs * "o"
        elif op_name == "wide":
            ii += 1  # move past "wide" opcode
            opcode = ord(self.code[ii])
            if opcode == 132:  # iinc
                op_size = 4
                struct_code = "HH"
                info_types = "lc"
            else:  # *load, *store or ret
                op_size = 2
                struct_code = "H"
                info_types = "l"
        assert op_size is not None, "Unexpected unknown size for opcode %d" % opcode
        values = struct.unpack(">" + struct_code,
                               self.code[ii + 1: ii + 1 + op_size])
        # Look for instructions that reference data or code
        symtype = None
        if op_name in ("anewarray", "checkcast", "instanceof", "multianewarray", "new"):
            # reference to class, array or interface type
            symtype = Symbol.REF_CLASS
        elif op_name in ("ldc", "ldc_w"):
            # reference to primitive constant, string literal or class
            symtype = Symbol.REF_CLASS
        elif op_name in ("invokeinterface", "invokespecial", "invokestatic", "invokevirtual"):
            # reference to a method
            symtype = Symbol.REF_CODE
        elif op_name in ("getfield", "putfield"):
            # reference to an instance field
            symtype = Symbol.REF_DATA
        elif op_name in ("getstatic", "putstatic"):
            # reference to a static field
            symtype = Symbol.REF_DATA
        if symtype is not None:
            assert info_types[0] == "c"
            ref = findref(self.class_file, values[0])
            if ref is not None:
                results.append(Symbol(None, symtype, ref))
        ii += op_size + 1
    return results
CodeAttributeInfo.dump = _CodeAttributeInfo_dump


def _ClassFile_dump(self):
    results = [Symbol(self.size, Symbol.CLASS, str(self.this_class))]
    for f in self.fields:
        f_info = f.dump()
        if f_info is not None:
            results.append(f_info)
    for m in self.methods:
        m_info = m.dump()
        if m_info is not None:
            results.extend(m_info)
    return results
ClassFile.dump = _ClassFile_dump


# Filters
def resolve(symlist):
    """Remove duplicate symbol info and resolve internal references"""
    seen = set()
    fields = {}
    methods = {}
    classes = {}
    # Remove duplicates and track definitions
    deduped = []
    for syminfo in symlist:
        if syminfo not in seen:
            seen.add(syminfo)
            deduped.append(syminfo)
            if syminfo.symtype.upper() == Symbol.CLASS:
                classes[syminfo.name] = syminfo
            elif syminfo.symtype.upper() == Symbol.DATA:
                fields[syminfo.name] = syminfo
            elif syminfo.symtype.upper() == Symbol.INSTANCE_DATA:
                fields[syminfo.name] = syminfo
            elif syminfo.symtype.upper() == Symbol.CODE:
                methods[syminfo.name] = syminfo

    # Remove references where there is a matching definition
    resolved = []
    for syminfo in deduped:
        if (syminfo.symtype.upper() == Symbol.REF_CLASS and
            syminfo.name in classes):
            pass
        elif (syminfo.symtype.upper() == Symbol.REF_DATA and
              syminfo.name in fields):
            pass
        elif (syminfo.symtype.upper() == Symbol.REF_INSTANCE_DATA and
              syminfo.name in fields):
            pass
        elif (syminfo.symtype.upper() == Symbol.REF_CODE and
              syminfo.name in methods):
            pass
        else:
            resolved.append(syminfo)
    return resolved


def remove_defined(symlist):
    return [sym for sym in symlist if sym.symtype.upper() not in Symbol.DEF_SYMTYPES]


def remove_undefined(symlist):
    return [sym for sym in symlist if sym.symtype.upper() in Symbol.DEF_SYMTYPES]


def remove_undefined(symlist):
    return [sym for sym in symlist if sym.symtype.upper() in Symbol.DEF_SYMTYPES]


def remove_private(symlist):
    return [sym for sym in symlist if sym.symtype.isupper()]


# Sort functions
def alphabetic_sort(symlist):
    return sorted(symlist, key=lambda x: x.name)


def numeric_sort(symlist):
    return sorted(symlist, key=lambda x: x.value)


def noop_sort(symlist):
    return symlist


def reverse_sort(symlist):
    symlist.reverse()
    return symlist


# Display functions
def normal_display(jarfile, filename, sym, current):
    return str(sym)


def prepend_filename(jarfile, filename, sym, current):
    if jarfile is None:
        return "%s:%s" % (filename, current)
    else:
        return "%s:%s:%s" % (jarfile, filename, current)


def name_only(jarfile, filename, sym, current):
    return "%s" % sym.name


class NMOpts(object):
    # short option, long option, help messsage, filter function, sort function, display function
    OPT_INFO = (("h", "help", "show this help", None, None, None),
                # Sort options
                ("p", "no-sort", "Don't sort; display in order encountered (default)", None, noop_sort, None),
                ("n", "numeric-sort", "Sort symbols numerically", None, numeric_sort, None),
                ("r", "reverse-sort", "Sort in reverse order", None, reverse_sort, None),
                ("a", "alpha-sort", "Sort alphabetically", None, alphabetic_sort, None),
                # Filter options
                ("u", "undefined-only", "Display only undefined symbols", remove_defined, None, None),
                ("U", "defined-only", "Don't display undefined symbols", remove_undefined, None, None),
                ("g", "extern-only", "Don't display external (non-private) symbols", remove_private, None, None),
                # Display options
                ("A", "print-file-name", "Write the pathname on each line", None, None, prepend_filename),
                ("j", "symbols-only", "Just display the symbol names (no value or type)", None, None, name_only),
                )
    SHORT_OPTS = dict([("-%s" % optinfo[0], optinfo) for optinfo in OPT_INFO])
    LONG_OPTS = dict([("--%s" % optinfo[0], optinfo) for optinfo in OPT_INFO])
    ALL_OPTS = dict(SHORT_OPTS.items() + LONG_OPTS.items())

    def usage(self, err):
        """Print usage message"""
        print >> sys.stderr, self.message
        print >> sys.stderr, "Options:"
        for optinfo in self.OPT_INFO:
            print >> sys.stderr, "   -%s/--%-16s : %s" % (optinfo[0], optinfo[1], optinfo[2])
        sys.exit(err)

    def __init__(self, message):
        self.message = message
        self.filters = [resolve]
        self.sorts = []
        self.displays = [normal_display]

    def getopts(self, argv):
        try:
            opts, args = getopt.getopt(argv,
                                       "".join([optinfo[0] for optinfo in self.OPT_INFO]),
                                       [optinfo[1] for optinfo in self.OPT_INFO])
        except getopt.GetoptError:
            self.usage(2)
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                self.usage(0)
            elif opt in ("-p", "--sort-natural"):
                self.sorts = []
            elif opt in self.ALL_OPTS:
                optinfo = self.ALL_OPTS[opt]
                if optinfo[3] is not None:
                    self.filters.append(optinfo[3])
                if optinfo[4] is not None:
                    self.sorts.append(optinfo[4])
                if optinfo[5] is not None:
                    self.displays.append(optinfo[5])
            else:
                print >> sys.stderr, "Unknown option %s" % opt
                self.usage(1)
        return args

    def process(self, symlist):
        # Apply filters in order
        for filter in self.filters:
            symlist = filter(symlist)
        # Apply sorts in order
        for sortfn in self.sorts:
            symlist = sortfn(symlist)
        return symlist

    def display(self, jarfile, filename, sym):
        # Apply display functions in order
        result = None
        for dispfn in self.displays:
            result = dispfn(jarfile, filename, sym, result)
        return result


if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print >> sys.stderr, "No classes were specified on the command line.  Try --help."
    else:
        opts = NMOpts(__doc__)
        args = opts.getopts(sys.argv[1:])
        for arg in args:
            if arg.endswith(".jar"):
                jarfile = arg
                clist = jar_classes(arg)
            else:
                jarfile = None
                with open(arg, "rb") as f:
                    clist = [(arg, ClassFile(f.read()))]
            for filename, c in clist:
                if jarfile is not None and prepend_filename not in opts.displays:
                    print "\n%s(%s):" % (jarfile, filename)
                results = c.dump()
                results = opts.process(results)
                for symbol in results:
                    print opts.display(jarfile, filename, symbol)
