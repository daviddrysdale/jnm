#!/usr/bin/env python
"""jnm [options] file[s]

jnm displays the symbol table of each file in the argument list.  If an
argument is a jarfile, a listing for each class file in the file will be
produced.

Each symbol name is preceded by its value (blanks if undefined).  This
value is followed by one of the following characters, representing the
symbol type:

    C  Class
    D  Static field
    I  Instance field
    T  Method

    K  Undefined reference to class
    F  Undefined reference to static field
    J  Undefined reference to instance field
    R  Undefined reference to method

If the symbol is private, the symbol's type is instead represented by
the corresponding lowercase letter.
"""
import sys

from javaclass import jvmspec
from javaclass.classfile import ClassFile
from javaclass.jarfile import jar_classes
from javaclass.jnm import _Opts
from javaclass.jnm import numeric_sort, reverse_sort, alphabetic_sort, noop_sort
from javaclass.jnm import remove_defined, remove_undefined, remove_private, resolve_all, resolve_class
from javaclass.jnm import prepend_filename, name_only, demangle, normal_display


class NMOpts(_Opts):
    OPT_INFO = (_Opts.OPT_INFO +
                # Sort options
                (("p", "no-sort", "Don't sort; display in order encountered (default)", None, noop_sort, None),
                 ("n", "numeric-sort", "Sort symbols numerically", None, numeric_sort, None),
                 ("r", "reverse-sort", "Sort in reverse order", None, reverse_sort, None),
                 ("a", "alpha-sort", "Sort alphabetically", None, alphabetic_sort, None),
                 # Filter options
                 ("u", "undefined-only", "Display only undefined symbols", remove_defined, None, None),
                 ("U", "defined-only", "Don't display undefined symbols", remove_undefined, None, None),
                 ("g", "extern-only", "Don't display external (non-private) symbols", remove_private, None, None),
                 ("f", "flatten", "Resolve references within the set of files specified", resolve_all, None, None),
                 # Display options
                 ("A", "print-file-name", "Write the pathname on each line", None, None, prepend_filename),
                 ("j", "symbols-only", "Just display the symbol names (no value or type)", None, None, name_only),
                 ("C", "demangle", "Decode symbol names into user-visible names", None, None, demangle),
                 # Special options
                 ("", "m64", "Assume pointers are 64-bit (default)", None, None, None),
                 ("", "m32", "Assume pointers are 32-bit", None, None, None),
                 ))

    def __init__(self, message):
        self.message = message
        self.filters = set([resolve_class])
        self.sorts = []
        self.displays = set([normal_display])

    def process_opt(self, opt, arg):
        if super(NMOpts, self).process_opt(opt, arg):
            return True
        elif opt in ("-p", "--no-sort"):
            self.sorts = []
            return True
        elif opt == "--m32":
            jvmspec.set_pointer_size(4)
            return True
        elif opt == "--m64":
            jvmspec.set_pointer_size(8)
            return True
        else:
            return False

if __name__ == "__main__":
    if len(sys.argv) <= 1:
        print >> sys.stderr, "No classes were specified on the command line.  Try --help."
    else:
        opts = NMOpts(__doc__)
        args = opts.getopts(sys.argv[1:])
        show_filename_prolog = (len(args) > 1)
        for arg in args:
            if arg.endswith(".jar"):
                show_filename_prolog = True
                jarfile = arg
                clist = jar_classes(arg)
            else:
                jarfile = None
                with open(arg, "rb") as f:
                    clist = [(arg, ClassFile(f.read()))]
            resultslist = [(jarfile, filename, sym) for filename, c in clist for sym in c.dump()]

        resultslist = opts.process(resultslist)

        prev_file = (None, None)
        for jarfile, classfile, symbol in resultslist:
            this_file = (jarfile, classfile)
            if (show_filename_prolog and
                prev_file != this_file and
                prepend_filename not in opts.displays):
                if jarfile is None:
                    print "\n%s:" % classfile
                else:
                    print "\n%s(%s):" % this_file
                prev_file = this_file
            print opts.display(jarfile, classfile, symbol).encode("utf-8")
